---
ahoyapi: v2

commands:
  up:
    usage: Build project.
    cmd: |
      docker-compose up -d "$@" &&
      docker-compose exec -T test dockerize -wait tcp://mariadb:3306 -timeout 2m;

  down:
    usage: Delete project.
    cmd: docker-compose down

  build:
    usage: Build project locally (single-local architecture only).
    cmd: |
      cat .env | grep -v "#" | grep -v -e '^$'
      if [ "$1" == "y" ]; then
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml --no-cache cli --load
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml --load
        docker-compose up -d
        docker-compose exec -T test dockerize -wait tcp://mariadb:3306 -timeout 2m
      else
        ahoy confirm "Are you sure environment variables are correct? Update .env if not." &&
        # Run this if confirm returns true
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml --no-cache cli --load
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml --load &&
          docker-compose up -d "$@" &&
          docker-compose exec -T test dockerize -wait tcp://mariadb:3306 -timeout 2m ||
        # Run this if confirm returns false
        echo "OK, nothing to do."
      fi

  # Compile
  publish:
    usage: Build multi-arch images and publish to dockerhub.
    cmd: |
      cat .env | grep -v "#" | grep -v -e '^$'
      if [ "$1" == "y" ]; then
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml -f bake.hcl --builder govcms-amd-arm --push cli
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml -f bake.hcl --builder govcms-amd-arm --push
      else
        ahoy confirm "Running this command will build multi-arch images and publish to dockerhub. Are you sure environment variables are correct?" &&
        # Run this if confirm returns true
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml -f bake.hcl --builder govcms-amd-arm --push cli &&
        env $(cat .env | grep -v "#" | xargs) docker buildx bake -f docker-compose.yml -f bake.hcl --builder govcms-amd-arm --push ||
        # Run this if confirm returns false
        echo "OK, probably a wise choice..."
      fi

  cli:
    usage: Start a shell inside TEST container.
    cmd: docker-compose exec cli bash

  run:
    usage: Run command inside TEST container.
    cmd: docker-compose exec -T cli bash -c "$@"

  drush:
    usage: Run drush commands in TEST container.
    cmd: docker-compose exec -T cli drush "$@"

  logs:
    usage: Show Docker logs.
    cmd: docker-compose logs "$@"

  ps:
    usage: List running Docker containers.
    cmd: docker-compose ps

  restart:
    usage: Restart Docker containers.
    cmd: docker-compose restart

  stop:
    usage: Stop Docker containers.
    cmd: docker-compose stop "$@"

  install:
    usage: Install the profile.
    cmd: docker-compose exec -T cli drush si -y govcms "$@"

  login:
    usage: Login to a website.
    cmd: docker-compose exec -T cli drush uli "$@"

  pull:
    usage: Pull latest docker images.
    cmd: docker image ls --format \"{{.Repository}}:{{.Tag}}\" | grep govcms/ | grep -v none | xargs -n1 docker pull | cat

  audit-site:
    usage: Run site audit
    cmd: docker-compose exec -T cli drutiny profile:run d8-full @self "$@"

  lint:
    usage: Lint code
    cmd: docker-compose exec cli lint-govcms

  test:
    usage: Run all tests.
    cmd: |
      ahoy test-phpunit
      ahoy test-behat

  test-behat:
    usage: Run Behat tests.
    cmd: docker-compose exec cli behat "$@"

  test-phpunit:
    usage: Run PHPUnit tests.
    cmd: docker-compose exec cli phpunit --testsuite govcms

  test-redis:
    usage: Verify redis can accept connections.
    cmd: |
      ahoy -v install
      docker-compose exec -T --env ENABLE_REDIS=true cli drush status
      if [ $(docker-compose exec -T redis redis-cli KEYS '*' | wc -l) -le 1 ]; then
        echo 'Redis fail: No valid cache keys.'
        exit 1
      else
        echo "Redis success: Redis contains $redisKeys keys."
      fi
  test-goss:
    usage: Validate images with dgoss.
    cmd: ./tests/goss/run_all.sh

  test-install:
    usage: Test a blank install.
    cmd: ahoy -v install -- install_configure_form.update_status_module='array(FALSE,FALSE)'

  test-nginx:
    usage: Validate the nginx image.
    cmd: |
      docker-compose exec -T test dockerize -wait tcp://nginx:8080 -timeout 1m
      docker-compose exec -T nginx nginx -t
      composer validate --strict -d .docker/images/nginx/tests
      composer install -d .docker/images/nginx/tests
      .docker/images/nginx/tests/vendor/bin/phpunit -c .docker/images/nginx/tests/phpunit.xml
  info:
    usage: Print build info to the current window
    cmd: |
      echo "[info]: GovCMS Lagoon build information"
      echo "---"
      echo "[image variables]"
      echo "  - Image version tag prefix: $IMAGE_VERSION_TAG_PREFIX"
      echo "  - Image version tag: $IMAGE_VERSION_TAG"
      echo "  - Image tag edge: $IMAGE_TAG_EDGE"
      echo "  - Image version tag: $IMAGE_VERSION_TAG"
      echo "  - Image version tag: $IMAGE_VERSION_TAG"
      echo "  - CLI Image name: $GOVCMS_CLI_IMAGE_NAME"
      echo "[docker variables]:"
      echo "  - Docker registry: $DOCKER_REGISTRY_HOST"
      echo "  - Docker namespace: $DOCKERHUB_NAMESPACE"
      echo "  - Docker namespace: $DOCKERHUB_NAMESPACE"
      echo "[version variables]:"
      echo "  - Lagoon: $LAGOON_IMAGE_VERSION"
      echo "  - Drupal: $DRUPAL_CORE_VERSION"
      echo "  - GovCMS Project: $GOVCMS_PROJECT_VERSION"

  confirm:
    cmd: read -r -p "${@} [y/N] " response; [ ${response} = "y" ]
    hide: true
