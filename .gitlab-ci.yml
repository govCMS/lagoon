---
image: gitlab-registry-production.govcms.amazee.io/govcms/govcms-ci/govcms-ci-buildx

services:
  - name: gitlab-registry-production.govcms.amazee.io/govcms/govcms-ci/dind:latest
    command: ["--tls=false"]

stages:
  - validate
  - build
  - test
  - deploy

# ---
# Common workflow rules.
# ---
workflow:
  rules:
    - if: $CI_COMMIT_REF_NAME == "2.x-develop"
      variables:
        DEPLOY_TAG: "9.x-edge"
    - if: $CI_COMMIT_REF_NAME == "1.x-develop"
      variables:
        DEPLOY_TAG: "8.x-edge"
    - if: $CI_COMMIT_REF_NAME == "buildx-silicon"
      variables:
        DEPLOY_TAG: "example-tag"
    - when: always # Run the pipeline in other cases

# ---
# Alias definitions.
# ---
.variables: &variables
  IMAGE_VERSION_TAG_PREFIX: ""
  IMAGE_VERSION_TAG: ""
  IMAGE_TAG_EDGE: $CI_COMMIT_SHA
  DOCKER_HOST: tcp://localhost:2375
  BUILDKIT_INLINE_CACHE: '1'
  DOCKER_DRIVER: overlay2

.before_script_build: &before_script_build
  before_script:
    - cp .env.default .env
    - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
    - export $(grep -v '^#' .env.default | xargs)
    - docker network prune -f && docker network inspect amazeeio-network >/dev/null || docker network create amazeeio-network
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - ahoy build y

# ---
# Job Definitions
# ---
deploy:multiarch:
  stage: deploy
  variables:
    <<: *variables
  script:
    - cp .env.default .env
    - echo $DEPLOY_TAG
    - sed -i -e "s/^GOVCMS_RELEASE_TAG.*/GOVCMS_RELEASE_TAG=$DEPLOY_TAG/" .env
    - cat .env
    - exit 1
    - update-binfmts --enable # Important: Ensures execution of other binary formats is enabled in the kernel
    - docker buildx create --name govcms-amd-arm --platform linux/amd64,linux/arm64 tcp://localhost:2375
    - docker buildx ls
    - export $(grep -v '^#' .env.default | xargs)
    - docker network prune -f && docker network inspect amazeeio-network >/dev/null || docker network create amazeeio-network
    - docker login -u $DOCKER_USER -p $DOCKER_PASS
    - ahoy publish y
  only:
    - buildx-silicon
    - 2.x-develop
  needs:
    - test:ahoy
  
validate:images:
  stage: validate
  script:
    - docker-compose config -q

build:images:
  stage: build
  variables:
    <<: *variables
    DOCKER_REGISTRY_HOST: $CI_REGISTRY/
  <<: *before_script_build
  script:
    - echo "Build successful"

info:modules:
  stage: build
  variables:
    <<: *variables
  <<: *before_script_build
  script:
    - ahoy -v install -- install_configure_form.update_status_module='array(FALSE,FALSE)'
    - docker-compose exec -T cli drush status
    - /govcms/vendor/bin/govcms-module_verify
  only:
    - schedules
  artifacts:
    paths:
      - $CSV_LOCATION

test:ahoy:
  stage: test
  variables:
    <<: *variables
  <<: *before_script_build
  script:
    - ahoy up
    - ahoy test-$AHOY_TEST
  parallel:
    matrix:
      - AHOY_TEST:
          - 'goss'
          - 'redis'
          - 'install'
          - 'nginx'
  needs:
    - build:images

deploy:edge:
  stage: deploy
  variables:
    <<: *variables
    IMAGE_TAG_EDGE: $TAG
    DOCKERHUB_NAMESPACE: "govcms"
    COMPOSE_PROJECT_NAME: "govcmslagoon"
    GOVCMS_CLI_IMAGE_NAME: "govcms"
  <<: *before_script_build
  script:
    - ahoy info
    - ahoy push
  parallel:
    matrix:
      - TAG: ["edge"]
  only:
    - 1.x-develop
    - 2.x-develop
  needs:
    - test:ahoy

deploy:beta:
  stage: deploy
  variables:
    <<: *variables
    IMAGE_TAG_EDGE: $TAG
    DOCKERHUB_NAMESPACE: "govcms"
    COMPOSE_PROJECT_NAME: "govcmslagoon"
    GOVCMS_CLI_IMAGE_NAME: "govcms"
  <<: *before_script_build
  script:
    - ahoy info
    - ahoy push
  parallel:
    matrix:
      - TAG: ["beta"]
  only:
    - /^release/2.x/.*$/@dof-dev/lagoon
  needs:
    - test:ahoy
